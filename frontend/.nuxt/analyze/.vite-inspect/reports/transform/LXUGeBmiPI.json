{
  "resolvedId": "/Users/mohammadrassoulzadeh/Documents/project/marktify/front/node_modules/unhead/dist/shared/unhead.DQc16pHI.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { M as MetaTagsArrayable } from './unhead.yem5I2v_.mjs';\n\nconst NAMESPACES = {\n  META: /* @__PURE__ */ new Set([\"twitter\"]),\n  OG: /* @__PURE__ */ new Set([\"og\", \"book\", \"article\", \"profile\", \"fb\"]),\n  MEDIA: /* @__PURE__ */ new Set([\"ogImage\", \"ogVideo\", \"ogAudio\", \"twitterImage\"]),\n  HTTP_EQUIV: /* @__PURE__ */ new Set([\"contentType\", \"defaultStyle\", \"xUaCompatible\"])\n};\nconst META_ALIASES = {\n  articleExpirationTime: \"article:expiration_time\",\n  articleModifiedTime: \"article:modified_time\",\n  articlePublishedTime: \"article:published_time\",\n  bookReleaseDate: \"book:release_date\",\n  fbAppId: \"fb:app_id\",\n  ogAudioSecureUrl: \"og:audio:secure_url\",\n  ogAudioUrl: \"og:audio\",\n  ogImageSecureUrl: \"og:image:secure_url\",\n  ogImageUrl: \"og:image\",\n  ogSiteName: \"og:site_name\",\n  ogVideoSecureUrl: \"og:video:secure_url\",\n  ogVideoUrl: \"og:video\",\n  profileFirstName: \"profile:first_name\",\n  profileLastName: \"profile:last_name\",\n  profileUsername: \"profile:username\",\n  msapplicationConfig: \"msapplication-Config\",\n  msapplicationTileColor: \"msapplication-TileColor\",\n  msapplicationTileImage: \"msapplication-TileImage\"\n};\nconst MetaPackingSchema = {\n  appleItunesApp: {\n    unpack: {\n      entrySeparator: \", \",\n      // @ts-expect-error untyped\n      resolve: ({ key, value }) => `${fixKeyCase(key)}=${value}`\n    }\n  },\n  refresh: {\n    metaKey: \"http-equiv\",\n    unpack: {\n      entrySeparator: \";\",\n      // @ts-expect-error untyped\n      resolve: ({ key, value }) => key === \"seconds\" ? `${value}` : void 0\n    }\n  },\n  robots: {\n    unpack: {\n      entrySeparator: \", \",\n      // @ts-expect-error untyped\n      resolve: ({ key, value }) => typeof value === \"boolean\" ? fixKeyCase(key) : `${fixKeyCase(key)}:${value}`\n    }\n  },\n  contentSecurityPolicy: {\n    metaKey: \"http-equiv\",\n    unpack: {\n      entrySeparator: \"; \",\n      // @ts-expect-error untyped\n      resolve: ({ key, value }) => `${fixKeyCase(key)} ${value}`\n    }\n  },\n  charset: {}\n};\nfunction fixKeyCase(key) {\n  const updated = key.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n  const prefixIndex = updated.indexOf(\"-\");\n  return prefixIndex === -1 ? updated : NAMESPACES.META.has(updated.slice(0, prefixIndex)) || NAMESPACES.OG.has(updated.slice(0, prefixIndex)) ? key.replace(/([A-Z])/g, \":$1\").toLowerCase() : updated;\n}\nfunction sanitizeObject(input) {\n  return Object.fromEntries(Object.entries(input).filter(([k, v]) => String(v) !== \"false\" && k));\n}\nfunction transformObject(obj) {\n  return Array.isArray(obj) ? obj.map(transformObject) : !obj || typeof obj !== \"object\" ? obj : Object.fromEntries(Object.entries(obj).map(([k, v]) => [fixKeyCase(k), transformObject(v)]));\n}\nfunction unpackToString(value, options = {}) {\n  const { entrySeparator = \"\", keyValueSeparator = \"\", wrapValue, resolve } = options;\n  return Object.entries(value).map(([key, val]) => {\n    if (resolve) {\n      const resolved = resolve({ key, value: val });\n      if (resolved !== void 0)\n        return resolved;\n    }\n    const processedVal = typeof val === \"object\" ? unpackToString(val, options) : typeof val === \"number\" ? val.toString() : typeof val === \"string\" && wrapValue ? `${wrapValue}${val.replace(new RegExp(wrapValue, \"g\"), `\\\\${wrapValue}`)}${wrapValue}` : val;\n    return `${key}${keyValueSeparator}${processedVal}`;\n  }).join(entrySeparator);\n}\nfunction handleObjectEntry(key, value) {\n  const sanitizedValue = sanitizeObject(value);\n  const fixedKey = fixKeyCase(key);\n  const attr = resolveMetaKeyType(fixedKey);\n  if (!MetaTagsArrayable.has(fixedKey)) {\n    return [{ [attr]: fixedKey, ...sanitizedValue }];\n  }\n  const input = Object.fromEntries(\n    Object.entries(sanitizedValue).map(([k, v]) => [`${key}${k === \"url\" ? \"\" : `${k[0].toUpperCase()}${k.slice(1)}`}`, v])\n  );\n  return unpackMeta(input || {}).sort((a, b) => (a[attr]?.length || 0) - (b[attr]?.length || 0));\n}\nfunction resolveMetaKeyType(key) {\n  if (MetaPackingSchema[key]?.metaKey === \"http-equiv\" || NAMESPACES.HTTP_EQUIV.has(key)) {\n    return \"http-equiv\";\n  }\n  const fixed = fixKeyCase(key);\n  const colonIndex = fixed.indexOf(\":\");\n  return colonIndex === -1 ? \"name\" : NAMESPACES.OG.has(fixed.slice(0, colonIndex)) ? \"property\" : \"name\";\n}\nfunction resolveMetaKeyValue(key) {\n  return META_ALIASES[key] || fixKeyCase(key);\n}\nfunction resolvePackedMetaObjectValue(value, key) {\n  if (key === \"refresh\")\n    return `${value.seconds};url=${value.url}`;\n  return unpackToString(transformObject(value), {\n    keyValueSeparator: \"=\",\n    entrySeparator: \", \",\n    resolve: ({ value: value2, key: key2 }) => value2 === null ? \"\" : typeof value2 === \"boolean\" ? key2 : void 0,\n    // @ts-expect-error untyped\n    ...MetaPackingSchema[key]?.unpack\n  });\n}\nfunction unpackMeta(input) {\n  const extras = [];\n  const primitives = {};\n  for (const [key, value] of Object.entries(input)) {\n    if (Array.isArray(value)) {\n      if (key === \"themeColor\") {\n        value.forEach((v) => {\n          if (typeof v === \"object\" && v !== null) {\n            extras.push({ name: \"theme-color\", ...v });\n          }\n        });\n        continue;\n      }\n      for (const v of value) {\n        if (typeof v === \"object\" && v !== null) {\n          const urlProps = [];\n          const otherProps = [];\n          for (const [propKey, propValue] of Object.entries(v)) {\n            const metaKey = `${key}${propKey === \"url\" ? \"\" : `:${propKey}`}`;\n            const meta2 = unpackMeta({ [metaKey]: propValue });\n            (propKey === \"url\" ? urlProps : otherProps).push(...meta2);\n          }\n          extras.push(...urlProps, ...otherProps);\n        } else {\n          extras.push(...typeof v === \"string\" ? unpackMeta({ [key]: v }) : handleObjectEntry(key, v));\n        }\n      }\n      continue;\n    }\n    if (typeof value === \"object\" && value) {\n      if (NAMESPACES.MEDIA.has(key)) {\n        const prefix = key.startsWith(\"twitter\") ? \"twitter\" : \"og\";\n        const type = key.replace(/^(og|twitter)/, \"\").toLowerCase();\n        const metaKey = prefix === \"twitter\" ? \"name\" : \"property\";\n        if (value.url) {\n          extras.push({\n            [metaKey]: `${prefix}:${type}`,\n            content: value.url\n          });\n        }\n        if (value.secureUrl) {\n          extras.push({\n            [metaKey]: `${prefix}:${type}:secure_url`,\n            content: value.secureUrl\n          });\n        }\n        for (const [propKey, propValue] of Object.entries(value)) {\n          if (propKey !== \"url\" && propKey !== \"secureUrl\") {\n            extras.push({\n              [metaKey]: `${prefix}:${type}:${propKey}`,\n              // @ts-expect-error untyped\n              content: propValue\n            });\n          }\n        }\n      } else if (MetaTagsArrayable.has(fixKeyCase(key))) {\n        extras.push(...handleObjectEntry(key, value));\n      } else {\n        primitives[key] = sanitizeObject(value);\n      }\n    } else {\n      primitives[key] = value;\n    }\n  }\n  const meta = Object.entries(primitives).map(([key, value]) => {\n    if (key === \"charset\")\n      return { charset: value === null ? \"_null\" : value };\n    const metaKey = resolveMetaKeyType(key);\n    const keyValue = resolveMetaKeyValue(key);\n    const processedValue = value === null ? \"_null\" : typeof value === \"object\" ? resolvePackedMetaObjectValue(value, key) : typeof value === \"number\" ? value.toString() : value;\n    return metaKey === \"http-equiv\" ? { \"http-equiv\": keyValue, \"content\": processedValue } : { [metaKey]: keyValue, content: processedValue };\n  });\n  return [...extras, ...meta].map(\n    (m) => !(\"content\" in m) ? m : m.content === \"_null\" ? { ...m, content: null } : m\n  );\n}\n\nexport { resolveMetaKeyValue as a, resolvePackedMetaObjectValue as b, resolveMetaKeyType as r, unpackMeta as u };\n",
      "start": 1746483912744,
      "end": 1746483912887,
      "sourcemaps": null
    },
    {
      "name": "nuxt:components-loader-pre",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "nuxt:module-preload-polyfill",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:head:unhead-imports",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746483912887,
      "end": 1746483912887,
      "order": "normal"
    }
  ]
}
