{
  "resolvedId": "/Users/mohammadrassoulzadeh/Documents/project/marktify/front/node_modules/unhead/dist/shared/unhead.Cp0iF6eN.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { U as UniqueTags, T as TagsWithInnerContent, M as MetaTagsArrayable, a as TagConfigKeys, D as DupeableTags } from './unhead.yem5I2v_.mjs';\n\nconst allowedMetaProperties = [\"name\", \"property\", \"http-equiv\"];\nfunction isMetaArrayDupeKey(v) {\n  const k = v.split(\":\")[1];\n  return MetaTagsArrayable.has(k);\n}\nfunction dedupeKey(tag) {\n  const { props, tag: name } = tag;\n  if (UniqueTags.has(name))\n    return name;\n  if (name === \"link\" && props.rel === \"canonical\")\n    return \"canonical\";\n  if (props.charset)\n    return \"charset\";\n  if (tag.tag === \"meta\") {\n    for (const n of allowedMetaProperties) {\n      if (props[n] !== void 0) {\n        return `${name}:${props[n]}`;\n      }\n    }\n  }\n  if (tag.key) {\n    return `${name}:key:${tag.key}`;\n  }\n  if (props.id) {\n    return `${name}:id:${props.id}`;\n  }\n  if (TagsWithInnerContent.has(name)) {\n    const v = tag.textContent || tag.innerHTML;\n    if (v) {\n      return `${name}:content:${v}`;\n    }\n  }\n}\nfunction hashTag(tag) {\n  const dedupe = tag._h || tag._d;\n  if (dedupe)\n    return dedupe;\n  const inner = tag.textContent || tag.innerHTML;\n  if (inner)\n    return inner;\n  return `${tag.tag}:${Object.entries(tag.props).map(([k, v]) => `${k}:${String(v)}`).join(\",\")}`;\n}\n\nfunction walkResolver(val, resolve, key) {\n  const type = typeof val;\n  if (type === \"function\") {\n    if (!key || key !== \"titleTemplate\" && !(key[0] === \"o\" && key[1] === \"n\")) {\n      val = val();\n    }\n  }\n  let v;\n  if (resolve) {\n    v = resolve(key, val);\n  }\n  if (Array.isArray(v)) {\n    return v.map((r) => walkResolver(r, resolve));\n  }\n  if (v?.constructor === Object) {\n    const next = {};\n    for (const key2 of Object.keys(v)) {\n      next[key2] = walkResolver(v[key2], resolve, key2);\n    }\n    return next;\n  }\n  return v;\n}\n\nfunction normalizeStyleClassProps(key, value) {\n  const store = key === \"style\" ? /* @__PURE__ */ new Map() : /* @__PURE__ */ new Set();\n  function processValue(rawValue) {\n    const value2 = rawValue.trim();\n    if (!value2)\n      return;\n    if (key === \"style\") {\n      const [k, ...v] = value2.split(\":\").map((s) => s.trim());\n      if (k && v.length)\n        store.set(k, v.join(\":\"));\n    } else {\n      value2.split(\" \").filter(Boolean).forEach((c) => store.add(c));\n    }\n  }\n  if (typeof value === \"string\") {\n    key === \"style\" ? value.split(\";\").forEach(processValue) : processValue(value);\n  } else if (Array.isArray(value)) {\n    value.forEach((item) => processValue(item));\n  } else if (value && typeof value === \"object\") {\n    Object.entries(value).forEach(([k, v]) => {\n      if (v && v !== \"false\") {\n        key === \"style\" ? store.set(k.trim(), v) : processValue(k);\n      }\n    });\n  }\n  return store;\n}\nfunction normalizeProps(tag, input) {\n  tag.props = tag.props || {};\n  if (!input) {\n    return tag;\n  }\n  Object.entries(input).forEach(([key, value]) => {\n    if (value === null) {\n      tag.props[key] = null;\n      return;\n    }\n    if (key === \"class\" || key === \"style\") {\n      tag.props[key] = normalizeStyleClassProps(key, value);\n      return;\n    }\n    if (TagConfigKeys.has(key)) {\n      if ([\"textContent\", \"innerHTML\"].includes(key) && typeof value === \"object\") {\n        let type = input.type;\n        if (!input.type) {\n          type = \"application/json\";\n        }\n        if (!type?.endsWith(\"json\") && type !== \"speculationrules\") {\n          return;\n        }\n        input.type = type;\n        tag.props.type = type;\n        tag[key] = JSON.stringify(value);\n      } else {\n        tag[key] = value;\n      }\n      return;\n    }\n    const strValue = String(value);\n    const isDataKey = key.startsWith(\"data-\");\n    if (strValue === \"true\" || strValue === \"\") {\n      tag.props[key] = isDataKey ? strValue : true;\n    } else if (!value && isDataKey && strValue === \"false\") {\n      tag.props[key] = \"false\";\n    } else if (value !== void 0) {\n      tag.props[key] = value;\n    }\n  });\n  return tag;\n}\nfunction normalizeTag(tagName, _input) {\n  const input = typeof _input === \"object\" && typeof _input !== \"function\" ? _input : { [tagName === \"script\" || tagName === \"noscript\" || tagName === \"style\" ? \"innerHTML\" : \"textContent\"]: _input };\n  const tag = normalizeProps({ tag: tagName, props: {} }, input);\n  if (tag.key && DupeableTags.has(tag.tag)) {\n    tag.props[\"data-hid\"] = tag._h = tag.key;\n  }\n  if (tag.tag === \"script\" && typeof tag.innerHTML === \"object\") {\n    tag.innerHTML = JSON.stringify(tag.innerHTML);\n    tag.props.type = tag.props.type || \"application/json\";\n  }\n  return Array.isArray(tag.props.content) ? tag.props.content.map((v) => ({ ...tag, props: { ...tag.props, content: v } })) : tag;\n}\nfunction normalizeEntryToTags(input, propResolvers) {\n  if (!input) {\n    return [];\n  }\n  if (typeof input === \"function\") {\n    input = input();\n  }\n  const resolvers = (key, val) => {\n    for (let i = 0; i < propResolvers.length; i++) {\n      val = propResolvers[i](key, val);\n    }\n    return val;\n  };\n  input = resolvers(void 0, input);\n  const tags = [];\n  input = walkResolver(input, resolvers);\n  Object.entries(input || {}).forEach(([key, value]) => {\n    if (value === void 0)\n      return;\n    for (const v of Array.isArray(value) ? value : [value])\n      tags.push(normalizeTag(key, v));\n  });\n  return tags.flat();\n}\n\nexport { normalizeProps as a, dedupeKey as d, hashTag as h, isMetaArrayDupeKey as i, normalizeEntryToTags as n, walkResolver as w };\n",
      "start": 1746483912264,
      "end": 1746483912883,
      "sourcemaps": null
    },
    {
      "name": "nuxt:components-loader-pre",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "nuxt:module-preload-polyfill",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746483912883,
      "end": 1746483912883,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746483912883,
      "end": 1746483912884,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "normal-normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:head:unhead-imports",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746483912884,
      "end": 1746483912884,
      "order": "normal"
    }
  ]
}
