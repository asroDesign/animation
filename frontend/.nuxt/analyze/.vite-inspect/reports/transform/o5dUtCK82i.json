{
  "resolvedId": "/Users/mohammadrassoulzadeh/Documents/project/marktify/front/node_modules/unhead/dist/shared/unhead.B578PsDV.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { b as ScriptNetworkEvents } from './unhead.yem5I2v_.mjs';\n\nfunction createNoopedRecordingProxy(instance = {}) {\n  const stack = [];\n  let stackIdx = -1;\n  const handler = (reuseStack = false) => ({\n    get(_, prop, receiver) {\n      if (!reuseStack) {\n        const v = Reflect.get(_, prop, receiver);\n        if (typeof v !== \"undefined\") {\n          return v;\n        }\n        stackIdx++;\n        stack[stackIdx] = [];\n      }\n      stack[stackIdx].push({ type: \"get\", key: prop });\n      return new Proxy(() => {\n      }, handler(true));\n    },\n    apply(_, __, args) {\n      stack[stackIdx].push({ type: \"apply\", key: \"\", args });\n      return void 0;\n    }\n  });\n  return {\n    proxy: new Proxy(instance || {}, handler()),\n    stack\n  };\n}\nfunction createForwardingProxy(target) {\n  const handler = {\n    get(_, prop, receiver) {\n      const v = Reflect.get(_, prop, receiver);\n      if (typeof v === \"object\") {\n        return new Proxy(v, handler);\n      }\n      return v;\n    },\n    apply(_, __, args) {\n      Reflect.apply(_, __, args);\n      return void 0;\n    }\n  };\n  return new Proxy(target, handler);\n}\nfunction replayProxyRecordings(target, stack) {\n  stack.forEach((recordings) => {\n    let context = target;\n    let prevContext = target;\n    recordings.forEach(({ type, key, args }) => {\n      if (type === \"get\") {\n        prevContext = context;\n        context = context[key];\n      } else if (type === \"apply\") {\n        context = context.call(prevContext, ...args);\n      }\n    });\n  });\n}\n\nfunction resolveScriptKey(input) {\n  return input.key || input.src || (typeof input.innerHTML === \"string\" ? input.innerHTML : \"\");\n}\nconst PreconnectServerModes = [\"preconnect\", \"dns-prefetch\"];\nfunction useScript(head, _input, _options) {\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\n  const options = _options || {};\n  const id = resolveScriptKey(input);\n  const prevScript = head._scripts?.[id];\n  if (prevScript) {\n    prevScript.setupTriggerHandler(options.trigger);\n    return prevScript;\n  }\n  options.beforeInit?.();\n  const syncStatus = (s) => {\n    script.status = s;\n    head.hooks.callHook(`script:updated`, hookCtx);\n  };\n  ScriptNetworkEvents.forEach((fn) => {\n    const k = fn;\n    const _fn = typeof input[k] === \"function\" ? input[k].bind(options.eventContext) : null;\n    input[k] = (e) => {\n      syncStatus(fn === \"onload\" ? \"loaded\" : fn === \"onerror\" ? \"error\" : \"loading\");\n      _fn?.(e);\n    };\n  });\n  const _cbs = { loaded: [], error: [] };\n  const _uniqueCbs = /* @__PURE__ */ new Set();\n  const _registerCb = (key, cb, options2) => {\n    if (head.ssr) {\n      return;\n    }\n    if (options2?.key) {\n      const key2 = `${options2?.key}:${options2.key}`;\n      if (_uniqueCbs.has(key2)) {\n        return;\n      }\n      _uniqueCbs.add(key2);\n    }\n    if (_cbs[key]) {\n      const i = _cbs[key].push(cb);\n      return () => _cbs[key]?.splice(i - 1, 1);\n    }\n    cb(script.instance);\n    return () => {\n    };\n  };\n  const loadPromise = new Promise((resolve) => {\n    if (head.ssr)\n      return;\n    const emit = (api) => requestAnimationFrame(() => resolve(api));\n    const _ = head.hooks.hook(\"script:updated\", ({ script: script2 }) => {\n      const status = script2.status;\n      if (script2.id === id && (status === \"loaded\" || status === \"error\")) {\n        if (status === \"loaded\") {\n          if (typeof options.use === \"function\") {\n            const api = options.use();\n            if (api) {\n              emit(api);\n            }\n          } else {\n            emit({});\n          }\n        } else if (status === \"error\") {\n          resolve(false);\n        }\n        _();\n      }\n    });\n  });\n  const script = {\n    _loadPromise: loadPromise,\n    instance: !head.ssr && options?.use?.() || null,\n    proxy: null,\n    id,\n    status: \"awaitingLoad\",\n    remove() {\n      script._triggerAbortController?.abort();\n      script._triggerPromises = [];\n      script._warmupEl?.dispose();\n      if (script.entry) {\n        script.entry.dispose();\n        script.entry = void 0;\n        syncStatus(\"removed\");\n        delete head._scripts?.[id];\n        return true;\n      }\n      return false;\n    },\n    warmup(rel) {\n      const { src } = input;\n      const isCrossOrigin = !src.startsWith(\"/\") || src.startsWith(\"//\");\n      const isPreconnect = rel && PreconnectServerModes.includes(rel);\n      let href = src;\n      if (!rel || isPreconnect && !isCrossOrigin) {\n        return;\n      }\n      if (isPreconnect) {\n        const $url = new URL(src);\n        href = `${$url.protocol}//${$url.host}`;\n      }\n      const link = {\n        href,\n        rel,\n        crossorigin: typeof input.crossorigin !== \"undefined\" ? input.crossorigin : isCrossOrigin ? \"anonymous\" : void 0,\n        referrerpolicy: typeof input.referrerpolicy !== \"undefined\" ? input.referrerpolicy : isCrossOrigin ? \"no-referrer\" : void 0,\n        fetchpriority: typeof input.fetchpriority !== \"undefined\" ? input.fetchpriority : \"low\",\n        integrity: input.integrity,\n        as: rel === \"preload\" ? \"script\" : void 0\n      };\n      script._warmupEl = head.push({ link: [link] }, { head, tagPriority: \"high\" });\n      return script._warmupEl;\n    },\n    load(cb) {\n      script._triggerAbortController?.abort();\n      script._triggerPromises = [];\n      if (!script.entry) {\n        syncStatus(\"loading\");\n        const defaults = {\n          defer: true,\n          fetchpriority: \"low\"\n        };\n        if (input.src && (input.src.startsWith(\"http\") || input.src.startsWith(\"//\"))) {\n          defaults.crossorigin = \"anonymous\";\n          defaults.referrerpolicy = \"no-referrer\";\n        }\n        script.entry = head.push({\n          script: [{ ...defaults, ...input }]\n        }, options);\n      }\n      if (cb)\n        _registerCb(\"loaded\", cb);\n      return loadPromise;\n    },\n    onLoaded(cb, options2) {\n      return _registerCb(\"loaded\", cb, options2);\n    },\n    onError(cb, options2) {\n      return _registerCb(\"error\", cb, options2);\n    },\n    setupTriggerHandler(trigger) {\n      if (script.status !== \"awaitingLoad\") {\n        return;\n      }\n      if ((typeof trigger === \"undefined\" || trigger === \"client\") && !head.ssr || trigger === \"server\") {\n        script.load();\n      } else if (trigger instanceof Promise) {\n        if (head.ssr) {\n          return;\n        }\n        if (!script._triggerAbortController) {\n          script._triggerAbortController = new AbortController();\n          script._triggerAbortPromise = new Promise((resolve) => {\n            script._triggerAbortController.signal.addEventListener(\"abort\", () => {\n              script._triggerAbortController = null;\n              resolve();\n            });\n          });\n        }\n        script._triggerPromises = script._triggerPromises || [];\n        const idx = script._triggerPromises.push(Promise.race([\n          trigger.then((v) => typeof v === \"undefined\" || v ? script.load : void 0),\n          script._triggerAbortPromise\n        ]).catch(() => {\n        }).then((res) => {\n          res?.();\n        }).finally(() => {\n          script._triggerPromises?.splice(idx, 1);\n        }));\n      } else if (typeof trigger === \"function\") {\n        trigger(script.load);\n      }\n    },\n    _cbs\n  };\n  loadPromise.then((api) => {\n    if (api !== false) {\n      script.instance = api;\n      _cbs.loaded?.forEach((cb) => cb(api));\n      _cbs.loaded = null;\n    } else {\n      _cbs.error?.forEach((cb) => cb());\n      _cbs.error = null;\n    }\n  });\n  const hookCtx = { script };\n  script.setupTriggerHandler(options.trigger);\n  if (options.use) {\n    const { proxy, stack } = createNoopedRecordingProxy(head.ssr ? {} : options.use() || {});\n    script.proxy = proxy;\n    script.onLoaded((instance) => {\n      replayProxyRecordings(instance, stack);\n      script.proxy = createForwardingProxy(instance);\n    });\n  }\n  if (!options.warmupStrategy && (typeof options.trigger === \"undefined\" || options.trigger === \"client\")) {\n    options.warmupStrategy = \"preload\";\n  }\n  if (options.warmupStrategy) {\n    script.warmup(options.warmupStrategy);\n  }\n  head._scripts = Object.assign(head._scripts || {}, { [id]: script });\n  return script;\n}\n\nexport { resolveScriptKey as r, useScript as u };\n",
      "start": 1746483913146,
      "end": 1746483913148,
      "sourcemaps": null
    },
    {
      "name": "nuxt:components-loader-pre",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "nuxt:module-preload-polyfill",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:head:unhead-imports",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746483913148,
      "end": 1746483913148,
      "order": "normal"
    }
  ]
}
