{
  "resolvedId": "/Users/mohammadrassoulzadeh/Documents/project/marktify/front/node_modules/unhead/dist/client.mjs",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "import { a as createUnhead } from './shared/unhead.DGkFBTYv.mjs';\nimport { H as HasElementTags } from './shared/unhead.yem5I2v_.mjs';\nimport { h as hashTag, i as isMetaArrayDupeKey, a as normalizeProps, d as dedupeKey } from './shared/unhead.Cp0iF6eN.mjs';\nimport 'hookable';\nimport './shared/unhead.DZbvapt-.mjs';\n\nasync function renderDOMHead(head, options = {}) {\n  const dom = options.document || head.resolvedOptions.document;\n  if (!dom || !head.dirty)\n    return;\n  const beforeRenderCtx = { shouldRender: true, tags: [] };\n  await head.hooks.callHook(\"dom:beforeRender\", beforeRenderCtx);\n  if (!beforeRenderCtx.shouldRender)\n    return;\n  if (head._domUpdatePromise) {\n    return head._domUpdatePromise;\n  }\n  head._domUpdatePromise = new Promise(async (resolve) => {\n    const dupeKeyCounter = /* @__PURE__ */ new Map();\n    const resolveTagPromise = new Promise((resolve2) => {\n      head.resolveTags().then((tags2) => {\n        resolve2(\n          tags2.map((tag) => {\n            const count = dupeKeyCounter.get(tag._d) || 0;\n            const res = {\n              tag,\n              id: (count ? `${tag._d}:${count}` : tag._d) || hashTag(tag),\n              shouldRender: true\n            };\n            if (tag._d && isMetaArrayDupeKey(tag._d)) {\n              dupeKeyCounter.set(tag._d, count + 1);\n            }\n            return res;\n          })\n        );\n      });\n    });\n    let state = head._dom;\n    if (!state) {\n      state = {\n        title: dom.title,\n        elMap: (/* @__PURE__ */ new Map()).set(\"htmlAttrs\", dom.documentElement).set(\"bodyAttrs\", dom.body)\n      };\n      for (const key of [\"body\", \"head\"]) {\n        const children = dom[key]?.children;\n        for (const c of children) {\n          const tag = c.tagName.toLowerCase();\n          if (!HasElementTags.has(tag)) {\n            continue;\n          }\n          const next = normalizeProps({ tag, props: {} }, {\n            innerHTML: c.innerHTML,\n            ...c.getAttributeNames().reduce((props, name) => {\n              props[name] = c.getAttribute(name);\n              return props;\n            }, {}) || {}\n          });\n          next.key = c.getAttribute(\"data-hid\") || void 0;\n          next._d = dedupeKey(next) || hashTag(next);\n          if (state.elMap.has(next._d)) {\n            let count = 1;\n            let k = next._d;\n            while (state.elMap.has(k)) {\n              k = `${next._d}:${count++}`;\n            }\n            state.elMap.set(k, c);\n          } else {\n            state.elMap.set(next._d, c);\n          }\n        }\n      }\n    }\n    state.pendingSideEffects = { ...state.sideEffects };\n    state.sideEffects = {};\n    function track(id, scope, fn) {\n      const k = `${id}:${scope}`;\n      state.sideEffects[k] = fn;\n      delete state.pendingSideEffects[k];\n    }\n    function trackCtx({ id, $el, tag }) {\n      const isAttrTag = tag.tag.endsWith(\"Attrs\");\n      state.elMap.set(id, $el);\n      if (!isAttrTag) {\n        if (tag.textContent && tag.textContent !== $el.textContent) {\n          $el.textContent = tag.textContent;\n        }\n        if (tag.innerHTML && tag.innerHTML !== $el.innerHTML) {\n          $el.innerHTML = tag.innerHTML;\n        }\n        track(id, \"el\", () => {\n          $el?.remove();\n          state.elMap.delete(id);\n        });\n      }\n      for (const k in tag.props) {\n        if (!Object.prototype.hasOwnProperty.call(tag.props, k))\n          continue;\n        const value = tag.props[k];\n        if (k.startsWith(\"on\") && typeof value === \"function\") {\n          const dataset = $el?.dataset;\n          if (dataset && dataset[`${k}fired`]) {\n            const ek = k.slice(0, -5);\n            value.call($el, new Event(ek.substring(2)));\n          }\n          if ($el.getAttribute(`data-${k}`) !== \"\") {\n            (tag.tag === \"bodyAttrs\" ? dom.defaultView : $el).addEventListener(\n              // onload -> load\n              k.substring(2),\n              value.bind($el)\n            );\n            $el.setAttribute(`data-${k}`, \"\");\n          }\n          continue;\n        }\n        const ck = `attr:${k}`;\n        if (k === \"class\") {\n          if (!value) {\n            continue;\n          }\n          for (const c of value) {\n            isAttrTag && track(id, `${ck}:${c}`, () => $el.classList.remove(c));\n            !$el.classList.contains(c) && $el.classList.add(c);\n          }\n        } else if (k === \"style\") {\n          if (!value) {\n            continue;\n          }\n          for (const [k2, v] of value) {\n            track(id, `${ck}:${k2}`, () => {\n              $el.style.removeProperty(k2);\n            });\n            $el.style.setProperty(k2, v);\n          }\n        } else if (value !== false && value !== null) {\n          $el.getAttribute(k) !== value && $el.setAttribute(k, value === true ? \"\" : String(value));\n          isAttrTag && track(id, ck, () => $el.removeAttribute(k));\n        }\n      }\n    }\n    const pending = [];\n    const frag = {\n      bodyClose: void 0,\n      bodyOpen: void 0,\n      head: void 0\n    };\n    const tags = await resolveTagPromise;\n    for (const ctx of tags) {\n      const { tag, shouldRender, id } = ctx;\n      if (!shouldRender)\n        continue;\n      if (tag.tag === \"title\") {\n        dom.title = tag.textContent;\n        track(\"title\", \"\", () => dom.title = state.title);\n        continue;\n      }\n      ctx.$el = ctx.$el || state.elMap.get(id);\n      if (ctx.$el) {\n        trackCtx(ctx);\n      } else if (HasElementTags.has(tag.tag)) {\n        pending.push(ctx);\n      }\n    }\n    for (const ctx of pending) {\n      const pos = ctx.tag.tagPosition || \"head\";\n      ctx.$el = dom.createElement(ctx.tag.tag);\n      trackCtx(ctx);\n      frag[pos] = frag[pos] || dom.createDocumentFragment();\n      frag[pos].appendChild(ctx.$el);\n    }\n    for (const ctx of tags)\n      await head.hooks.callHook(\"dom:renderTag\", ctx, dom, track);\n    frag.head && dom.head.appendChild(frag.head);\n    frag.bodyOpen && dom.body.insertBefore(frag.bodyOpen, dom.body.firstChild);\n    frag.bodyClose && dom.body.appendChild(frag.bodyClose);\n    for (const k in state.pendingSideEffects) {\n      state.pendingSideEffects[k]();\n    }\n    head._dom = state;\n    await head.hooks.callHook(\"dom:rendered\", { renders: tags });\n    resolve();\n  }).finally(() => {\n    head._domUpdatePromise = void 0;\n    head.dirty = false;\n  });\n  return head._domUpdatePromise;\n}\n\nfunction createHead(options = {}) {\n  const render = options.domOptions?.render || renderDOMHead;\n  options.document = options.document || (typeof window !== \"undefined\" ? document : void 0);\n  const initialPayload = options.document?.head.querySelector('script[id=\"unhead:payload\"]')?.innerHTML || false;\n  return createUnhead({\n    ...options,\n    plugins: [\n      ...options.plugins || [],\n      {\n        key: \"client\",\n        hooks: {\n          \"entries:updated\": render\n        }\n      }\n    ],\n    init: [\n      initialPayload ? JSON.parse(initialPayload) : false,\n      ...options.init || []\n    ]\n  });\n}\n\nfunction createDebouncedFn(callee, delayer) {\n  let ctxId = 0;\n  return () => {\n    const delayFnCtxId = ++ctxId;\n    delayer(() => {\n      if (ctxId === delayFnCtxId) {\n        callee();\n      }\n    });\n  };\n}\n\nexport { createDebouncedFn, createHead, renderDOMHead };\n",
      "start": 1746483911718,
      "end": 1746483912228,
      "sourcemaps": null
    },
    {
      "name": "nuxt:components-loader-pre",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "pre"
    },
    {
      "name": "nuxt:layer-aliasing",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "pre"
    },
    {
      "name": "nuxt:server-devonly:transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "pre"
    },
    {
      "name": "vite:esbuild",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:vue",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "vite:vue-jsx",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "nuxt:remove-plugin-metadata",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "nuxt:prehydrate-transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "nuxt:module-preload-polyfill",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "replace",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "ssr-styles",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:build-html",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "nuxt:composable-keys",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:head:unhead-imports",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:imports-transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "unctx:transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:pages-macros-transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:runtime-paths-dep",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:route-injection-plugin",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:components:imports",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:components-loader",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "nuxt:tree-shake-composables:transform",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "post"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal-normal"
    },
    {
      "name": "vite:reporter",
      "start": 1746483912228,
      "end": 1746483912228,
      "order": "normal"
    }
  ]
}
